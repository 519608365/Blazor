<Project>

  <!-- Require rebuild if the targets change -->
  <PropertyGroup>
    <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
  </PropertyGroup>

  <PropertyGroup>
    <BlazorComponentNamespace>$(RootNamespace)</BlazorComponentNamespace>
  </PropertyGroup>

  <!-- Something quick for input/output tracking - the assumptions here should match what the CLI does -->
  <ItemGroup>
    <BlazorGenerate Include="**\*.cshtml" />
    <BlazorDeclaration Include="@(BlazorGenerate->'$(IntermediateOutputPath)%(RelativeDir)%(FileName).cshtml.g.d.cs')" />
    <BlazorDefinition Include="@(BlazorGenerate->'$(IntermediateOutputPath)%(RelativeDir)%(FileName).g.cs')" />

    <!-- 
      Instruct VS to include cshtml files in its "fast up-to-date check". If we didn't, then
      it will skip the build entirely if you only changed cshtml files.
    -->
    <UpToDateCheckInput Include="**\*.cshtml" />

    <!-- Path used for the temporary compilation we produce for component discovery -->
    <_BlazorTempAssembly Include="$(IntermediateOutputPath)$(TargetName).BlazorTemp.dll" />
  </ItemGroup>

  <ItemGroup>
    <!-- 
      Instruct VS to re-run the target when input files change. Other IDEs may not honor this
      and therefore developers may need to rebuild after changing cshtml files. 
    -->
    <Compile Update="**\*.cshtml">
      <Generator>MSBuild:BlazorGenerateDeclaration</Generator>
    </Compile>
  </ItemGroup>

  <!--
    Generates 'declaration' files for each component, that only have that class and member declarations.

    These files participate in the design-time-build for intellisense, and are used at build-time
    when discovering components for a 'real' build.
  -->
  <Target
    Name="BlazorGenerateDeclaration"
    BeforeTargets="CoreCompile"
    Inputs="@(BlazorGenerate)"
    Outputs="@(BlazorDeclaration)">

    <PropertyGroup>
      <_SourceArg>@(BlazorGenerate->'--source &quot;%(Identity)&quot;', ' ')</_SourceArg>
      <_OutputArg>@(BlazorDeclaration->'--output &quot;%(Identity)&quot;', ' ')</_OutputArg>
      <_BaseDirectoryArg>--base-directory &quot;$(MSBuildProjectDirectory)&quot;</_BaseDirectoryArg>
      <_NamespaceArg>--namespace $(BlazorComponentNamespace)</_NamespaceArg>
      <_VerboseArg Condition="'$(_BlazorVerbose)'==''">--verbose</_VerboseArg>
    </PropertyGroup>

    <MakeDir  Directories="%(BlazorDeclaration.RelativeDir)" />

    <Exec Command="$(BlazorBuildExe) generate-declaration $(_SourceArg) $(_OutputArg) $(_NamespaceArg) $(_BaseDirectoryArg) $(_VerboseArg)" />

    <ItemGroup>
      <FileWrites Include="@(BlazorDeclaration)" />
    </ItemGroup>

    <ItemGroup Condition="'$(DesignTimeBuild)'=='true'">
      <Compile Include="@(BlazorDeclaration)" />
    </ItemGroup>
  </Target>

  <!--
    Generates 'definition' files for each component, using the temp-compiled assembly as an input.

    These files are used in the real build and don't participate in design time builds.
  -->
  <Target 
    Name="BlazorGenerateDefinition" 
    BeforeTargets="CoreCompile" 
    DependsOnTargets="_BlazorTempCompile"
    Inputs="@(ReferencePathWithRefAssemblies);@(BlazorGenerate)"
    Outputs="@(BlazorDefinition)"
    Condition="'$(DesignTimeBuild)'!='true'">

    <!-- Include the temp assembly as a reference so we can discover components from the app.-->
    <ItemGroup>
      <_BlazorReference Include="@(ReferencePathWithRefAssemblies);@(_BlazorTempAssembly)"/>
    </ItemGroup>

    <PropertyGroup>
      <_SourceArg>@(BlazorGenerate->'--source &quot;%(Identity)&quot;', ' ')</_SourceArg>
      <_OutputArg>@(BlazorDefinition->'--output &quot;%(Identity)&quot;', ' ')</_OutputArg>
      <_ReferenceArg>@(_BlazorReference->'--reference &quot;%(Identity)&quot;', ' ')</_ReferenceArg>
      <_BaseDirectoryArg>--base-directory &quot;$(MSBuildProjectDirectory)&quot;</_BaseDirectoryArg>
      <_NamespaceArg>--namespace $(BlazorComponentNamespace)</_NamespaceArg>
      <_VerboseArg Condition="'$(_BlazorVerbose)'==''">--verbose</_VerboseArg>
    </PropertyGroup>
    
    <Exec Command="$(BlazorBuildExe) generate-definition $(_SourceArg) $(_ReferenceArg) $(_OutputArg) $(_NamespaceArg) $(_BaseDirectoryArg) $(_VerboseArg)" />

    <ItemGroup>
      <FileWrites Include="@(BlazorDefinition)" />
    </ItemGroup>

    <ItemGroup Condition="'$(DesignTimeBuild)'!='true'">
      <Compile Include="@(BlazorDefinition)" />
    </ItemGroup>
  </Target>

  <!--
    Taken from the Razor SDK targets
  -->
 <Target 
    Name="_BlazorTempCompile"
    DependsOnTargets="BlazorGenerateDeclaration;FindReferenceAssembliesForReferences"
    Inputs="
      $(MSBuildAllProjects);
      @(BlazorDeclaration);
      @(Compile);
      $(AssemblyOriginatorKeyFile);
      @(ReferencePathWithRefAssemblies);
      @(CompiledLicenseFile);
      @(LinkResource);
      $(ResolvedCodeAnalysisRuleSet);
      @(AdditionalFiles)"
    Outputs="@(_BlazorTempAssembly);$(NonExistentFile)"
    Condition="'$(DesignTimeBuild)'!='true'">

    <!-- These two compiler warnings are raised when a reference is bound to a different version
             than specified in the assembly reference version number.  MSBuild raises the same warning in this case,
             so the compiler warning would be redundant. -->
    <PropertyGroup Condition="('$(TargetFrameworkVersion)' != 'v1.0') and ('$(TargetFrameworkVersion)' != 'v1.1')">
      <NoWarn>$(NoWarn);1701;1702</NoWarn>
    </PropertyGroup>

    <PropertyGroup>
      <!-- To match historical behavior, when inside VS11+ disable the warning from csc.exe indicating that no sources were passed in-->
      <NoWarn Condition="'$(BuildingInsideVisualStudio)' == 'true' AND '$(VisualStudioVersion)' != '' AND '$(VisualStudioVersion)' &gt; '10.0'">$(NoWarn);2008</NoWarn>
    </PropertyGroup>

    <ItemGroup Condition="'$(TargetingClr2Framework)' == 'true'">
      <ReferencePathWithRefAssemblies>
        <EmbedInteropTypes />
      </ReferencePathWithRefAssemblies>
    </ItemGroup>

    <PropertyGroup>
      <!-- If the user has specified AppConfigForCompiler, we'll use it. If they have not, but they set UseAppConfigForCompiler,
                 then we'll use AppConfig -->
      <AppConfigForCompiler Condition="'$(AppConfigForCompiler)' == '' AND '$(UseAppConfigForCompiler)' == 'true'">$(AppConfig)</AppConfigForCompiler>
    </PropertyGroup>

    <!-- Prefer32Bit was introduced in .NET 4.5. Set it to false if we are targeting 4.0 -->
    <PropertyGroup Condition="('$(TargetFrameworkVersion)' == 'v4.0')">
      <Prefer32Bit>false</Prefer32Bit>
    </PropertyGroup>

    <!-- TODO: Remove this ItemGroup once it has been moved to "_GenerateCompileInputs" target in Microsoft.Common.CurrentVersion.targets.
         https://github.com/dotnet/roslyn/issues/12223 -->
    <ItemGroup Condition="('$(AdditionalFileItemNames)' != '')">
      <AdditionalFileItems Include="$(AdditionalFileItemNames)" />
      <AdditionalFiles Include="@(%(AdditionalFileItems.Identity))" />
    </ItemGroup>

    <PropertyGroup Condition="'$(UseSharedCompilation)' == ''">
      <UseSharedCompilation>true</UseSharedCompilation>
    </PropertyGroup>

    <Csc
         AdditionalLibPaths="$(AdditionalLibPaths)"
         AddModules="@(AddModules)"
         AdditionalFiles="@(AdditionalFiles)"
         AllowUnsafeBlocks="$(AllowUnsafeBlocks)"
         Analyzers="@(Analyzer)"
         ApplicationConfiguration="$(AppConfigForCompiler)"
         BaseAddress="$(BaseAddress)"
         CheckForOverflowUnderflow="$(CheckForOverflowUnderflow)"
         ChecksumAlgorithm="$(ChecksumAlgorithm)"
         CodeAnalysisRuleSet="$(ResolvedCodeAnalysisRuleSet)"
         CodePage="$(CodePage)"
         DebugType="$(DebugType)"
         DefineConstants="$(DefineConstants)"
         DelaySign="$(DelaySign)"
         DisabledWarnings="$(NoWarn)"
         EmitDebugInformation="$(DebugSymbols)"
         EnvironmentVariables="$(CscEnvironment)"
         ErrorEndLocation="$(ErrorEndLocation)"
         ErrorLog="$(ErrorLog)"
         ErrorReport="$(ErrorReport)"
         Features="$(Features)"
         FileAlignment="$(FileAlignment)"
         GenerateFullPaths="$(GenerateFullPaths)"
         HighEntropyVA="$(HighEntropyVA)"
         Instrument="$(Instrument)"
         KeyContainer="$(KeyContainerName)"
         KeyFile="$(KeyOriginatorFile)"
         LangVersion="$(LangVersion)"
         LinkResources="@(LinkResource)"
         MainEntryPoint="$(StartupObject)"
         ModuleAssemblyName="$(ModuleAssemblyName)"
         NoConfig="true"
         NoLogo="$(NoLogo)"
         NoStandardLib="$(NoCompilerStandardLib)"
         NoWin32Manifest="$(NoWin32Manifest)"
         Optimize="$(Optimize)"
         Deterministic="$(Deterministic)"
         PublicSign="$(PublicSign)"
         OutputAssembly="@(_BlazorTempAssembly)"
         Platform="$(PlatformTarget)"
         Prefer32Bit="$(Prefer32Bit)"
         PreferredUILang="$(PreferredUILang)"
         ProvideCommandLineArgs="$(ProvideCommandLineArgs)"
         References="@(ReferencePathWithRefAssemblies)"
         ReportAnalyzer="$(ReportAnalyzer)"
         Resources="@(CompiledLicenseFile)"
         ResponseFiles="$(CompilerResponseFile)"
         RuntimeMetadataVersion="$(RuntimeMetadataVersion)"
         SharedCompilationId="$(SharedCompilationId)"
         SkipCompilerExecution="$(SkipCompilerExecution)"
         Sources="@(BlazorDeclaration);@(Compile)"
         SubsystemVersion="$(SubsystemVersion)"
         TargetType="Library"
         ToolExe="$(CscToolExe)"
         ToolPath="$(CscToolPath)"
         TreatWarningsAsErrors="$(TreatWarningsAsErrors)"
         UseHostCompilerIfAvailable="$(UseHostCompilerIfAvailable)"
         UseSharedCompilation="$(UseSharedCompilation)"
         Utf8Output="$(Utf8Output)"
         VsSessionGuid="$(VsSessionGuid)"
         WarningLevel="$(WarningLevel)"
         WarningsAsErrors="$(WarningsAsErrors)"
         WarningsNotAsErrors="$(WarningsNotAsErrors)"
         PathMap="$(PathMap)"
         SourceLink="$(SourceLink)">
      <Output TaskParameter="CommandLineArgs" ItemName="CscCommandLineArgs" />
    </Csc>

    <ItemGroup>
      <FileWrites Include="@(_BlazorTempAssembly)" Condition="Exists('@(_BlazorTempAssembly)')" />
    </ItemGroup>
  </Target>

</Project>
